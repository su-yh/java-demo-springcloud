server:
  port: 9000


#服务的名称
spring:
  application:
    name: api-gateway



#指定注册中心地址
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

#/order-service/api/v1/order/save?user_id=2&product_id=1
# 自定义路由映射
zuul:
  routes:
    # 以 /apigateway/order/ 开头的api 地址都会被转到 order-service 微服务
    # 同时，在默认情况下。这些前缀将会被去掉，然后再以后面的路径去访问实际的微服务API
    # 例如: localhost/apigateway/order/listOrder 到order-service 的路径就是: localhost/listOrder
    order-service: /apigateway/order/**
    # 以 /apigateway/product/ 开头的api 地址都会被转到 product-service 微服务
    # 我们可以使用参数：stripPrefix来指定不去掉前缀。
    product-service: # 路由名称，名称任意，路由名称唯一。当以这种方式进行路由配置时这个名称任意，只需要唯一就可以了。
      path: /apigateway/product/** # 访问路径
      serviceId: product-service # 指定服务ID，会自动从Eureka中找到此服务的ip和端口
      # 代理转发时是否去掉前缀，false: 代理转发时不去掉前缀 true: 代理转发时去掉前缀(默认配置)
      # 例如: 为true时请求 /product/get/1，代理转发到/get/1
      stripPrefix: false
  # 统一入口为上面的配置，其他入口忽略
  # 禁止用户使用微服务名称来访问接口(前提是每一个微服务名都是以 -service 为后缀)，
  # 而必须使用网关路由配置给出的配置进行访问，需要添加下面这个配置
  # 这一个的忽略是防止人使用微服务名称加API 路径来访问
  # 加上这个配置则会提示 404
  ignored-patterns: /*-service/**

  # 禁止通过网关访问的微服务
  # 忽略整个服务不对外提供接口
  # 那么这些微服务的接口就只能通过原始的微服务路径访问
  # ignored-services: order-service

  # 处理http 请求头为空的问题，这个属性会过滤掉一些HEADERS 里面的某些KEY 值过滤掉，不往下游传递。
  # 这里给这个过滤的值为空，也就是说不对任何KEY 进行过滤，全部往下游传递
  sensitive-headers:


