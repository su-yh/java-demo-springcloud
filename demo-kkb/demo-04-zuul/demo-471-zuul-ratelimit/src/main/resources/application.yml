server:
  port: 9000

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8000/eureka

spring:
  application:
    name: abcmsc-zuul-depart

zuul:
  host:
    # HTTP连接超时大于Hystrix的超时时间
    connect-timeout-millis: 15000
  routes:
    abcmsc-consumer-depart-8080: /abc8080/**
    abcmsc-consumer-depart-8090: /abc8090/**

  ratelimit:
    enabled: true  # 开启限流
    # 设置限流策略
    # 在一个单位时间窗内通过该zuul的用户数量、ip数量及url数量，都不能超过3个
    default-policy:
      quota: 1   # 指定限流的时间窗数量
      refresh-interval: 3    # 指定单位时间窗大小，单位秒
      limit: 3  # 在指定的单位时间窗内启用限流的限定值
      type: user,origin,url   # 指定限流查验的类型

ribbon:
  # Ribbon 的超时配置
  ConnectTimeout: 5000
  # 读取超时，试了一下。它的默认值应该是1 秒。但是不知道它实际在哪里做的
  ReadTimeout: 5000
hystrix:
  command:
    default:
      execution:
        isolation:
          # 隔离策略二选一[thread/semaphore]，默认为线程隔离
          strategy: thread
          thread:
            # 线程隔离默认(全局性)超时间
            # 系统默认的默认超时时间为: 1 秒
            # 修改默认超时时间为: 4 秒
            # 这个是什么意思呢，就是整个系统中使用到的线程隔离级别的超时都是这个默认值
            # 这个默认值的优先级是最低的，只要在任何地方对这个值做了修改那么在那个地方它的默认超时间就以它为准
            # 比如：在com.suyh322.controller.SomeController.getByIdHandler 上面的注解@HystrixCommand
            # 需要开启超时时限的配置: ${hystrix.command.default.execution.timeout.enabled}
            timeoutInMilliseconds: 4000
