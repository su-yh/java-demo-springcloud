server:
  port: 8381
spring:
  application:
    name: abcmsc-consumer-depart

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8000/eureka
      # defaultZone: http://localhost:8100/eureka,http://localhost:8200/eureka,http://localhost:8300/eureka
  instance:
    # 该ID 将会显示在eureka 注册中心的Status 那一栏
    # TODO: 注意，${eureka.instance.instance-id}这个值不能相同，如果相同则注册中心会认为是同一个实例
    instance-id: abcmsc-consumer-${server.port}
    # 设置当前Client向Server发送一次心跳的时间间隔，单位秒
    lease-renewal-interval-in-seconds: 1
    # 指定让Server认定当前Client已经失效的时间，将来可以从注册表中剔除了，单位秒
    lease-expiration-duration-in-seconds: 3

feign:
  client:
    config:
      default:
        connectTimeout: 5000   # 指定Feign客户端连接提供者的超时时限
        readTimeout: 5000      # 指定Feign客户端连接上提供者后，向提供者进行提交请求，从提交时刻开始，到接收到响应，这个时段的超时时限

  # 开启Feign对Hystrix的支持
  hystrix:
    enabled: true

# 修改负载均衡策略为：随机策略
#abcmsc-provider-depart:
#  ribbon:
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule

# Hystrix 官网配置
# https://github.com/Netflix/Hystrix/wiki/Configuration
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            # 线程隔离默认(全局性)超时间
            # 系统默认的默认超时时间为: 1 秒
            # 修改默认超时时间为: 4 秒
            # 这个是什么意思呢，就是整个系统中使用到的线程隔离级别的超时都是这个默认值
            # 这个默认值的优先级是最低的，只要在任何地方对这个值做了修改那么在那个地方它的默认超时间就以它为准
            # 比如：在com.suyh322.controller.SomeController.getByIdHandler 上面的注解@HystrixCommand
            timeoutInMilliseconds: 4000